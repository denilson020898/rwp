{
	"info": {
		"_postman_id": "51ce1ef4-14d5-4d5e-a8fa-2fb0c45a8d5c",
		"name": "to_do_items",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var result = pm.response.json()\r",
							"\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"returns one pending item\", function () {\r",
							"    if (result[\"pending_items\"].length !== 1) {\r",
							"        throw new Error(\r",
							"            \"returns the wrong number of pending items\"\r",
							"        );\r",
							"    }\r",
							"})\r",
							"\r",
							"pm.test(\"pending item has the correct title\", function() {\r",
							"    if (result[\"pending_items\"][0][\"title\"] !== \"washing\") {\r",
							"        throw new Error(\"title of the pending item is not 'washing'\");\r",
							"    }\r",
							"})\r",
							"\r",
							"pm.test(\"pending item has the correct status\", function() {\r",
							"    if (result[\"pending_items\"][0][\"status\"] !== \"pending\") {\r",
							"        throw new Error(\"status of the pending item is not 'pending'\");\r",
							"    }\r",
							"})\r",
							"\r",
							"pm.test(\"returns zero done items\", function() {\r",
							"    if (result[\"done_items\"].length !== 0) {\r",
							"        throw new Error(\"returns the wrong number of done items\");\r",
							"    }\r",
							"})\r",
							"\r",
							"pm.test(\"checking pending item count\", function() {\r",
							"    if (result[\"pending_item_count\"] !== 1) {\r",
							"        throw new Error(\"pending_item_count needs to be one\");\r",
							"    }\r",
							"})\r",
							"\r",
							"pm.test(\"checking done item count\", function() {\r",
							"    if (result[\"done_item_count\"] !== 0) {\r",
							"        throw new Error(\"done_item_count needs to be zero\");\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/v1/item/create/washing",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"item",
						"create",
						"washing"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var result = pm.response.json()\r",
							"\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"returns two pending item\", function() {\r",
							"    if (result[\"pending_items\"].length !== 2) {\r",
							"        throw new Error(\"returns the wrong number of pending items\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"pending item has the correct title\", function() {\r",
							"    if (result[\"pending_items\"][0][\"title\"] !== \"washing\") {\r",
							"        throw new Error(\"title of the pending item is not 'washing'\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"pending item has the correct status\", function () {\r",
							"    if (resutl[\"pending_items\"][0][\"status\"] !== \"pending\") {\r",
							"        throw new Error(\"status of the pending item is not 'pending'\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"pending item has the correct title\", function () {\r",
							"    if (resutl[\"pending_items\"][1][\"title\"] !== \"cooking\") {\r",
							"        throw new Error(\"title of the pending item is not 'cooking'\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"pending item has the correct status\", function () {\r",
							"    if (resutl[\"pending_items\"][1][\"status\"] !== \"pending\") {\r",
							"        throw new Error(\"status of the pending item is not 'pending'\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"returns zero done items\", function() {\r",
							"    if (result[\"done_items\"].length !== 0) {\r",
							"        throw new Error(\"returns the wrong number of done items\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"checking pending item count\", function() {\r",
							"    if (result[\"pending_item_count\"].length !== 2) {\r",
							"        throw new Error(\"pending_item_count needs to be two\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"checking done item count\", function() {\r",
							"    if (result[\"done_item_count\"].length !== 0) {\r",
							"        throw new Error(\"done_item_count needs to be two\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/v1/item/create/cooking",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"v1",
						"item",
						"create",
						"cooking"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoyfQ.0NAXbbVzeMaKZAl8HdOq3JcgIDf5xpGF2rkg5frw6FE",
				"type": "string"
			},
			{
				"key": "key",
				"value": "user-token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}